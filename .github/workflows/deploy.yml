name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python manage.py test
        
    - name: Create deployment package
      run: |
        # Create deployment package with exclusions
        tar -czf vehicle-parts-api-deploy.tar.gz \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.git' \
          --exclude='.env*' \
          --exclude='*.log' \
          --exclude='staticfiles' \
          --exclude='media' \
          --exclude='*.tar.gz' \
          --exclude='deploy-temp' \
          --exclude='.github' \
          .
          
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ec2-user
          
          # Stop existing containers
          echo "üõë Stopping existing containers..."
          docker stop $(docker ps -q) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          
          # Remove old deployment
          echo "üóëÔ∏è Removing old deployment..."
          rm -rf vehicle-parts-api
          
          # Create new directory
          mkdir -p vehicle-parts-api
          
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "vehicle-parts-api-deploy.tar.gz"
        target: "/home/ec2-user/vehicle-parts-api/"
        
    - name: Extract and deploy on EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ec2-user/vehicle-parts-api
          
          # Extract deployment package
          echo "üì¶ Extracting deployment package..."
          tar -xzf vehicle-parts-api-deploy.tar.gz
          
          # Install dependencies
          echo "üì• Installing dependencies..."
          pip3 install -r requirements.txt
          
          # Run migrations
          echo "üîÑ Running database migrations..."
          python3 manage.py makemigrations
          python3 manage.py migrate
          
          # Build and run Docker container
          echo "üê≥ Building and running Docker container..."
          docker build -t vehicle-parts-api .
          docker run -d --name vehicle-parts-api -p 8000:8000 \
            -e SECRET_KEY="your-production-secret-key-here" \
            -e DEBUG="False" \
            -e ALLOWED_HOSTS="3.107.165.131,localhost,127.0.0.1" \
            -e DB_HOST="vehicle-parts-db.c5m26imqm4kv.ap-southeast-2.rds.amazonaws.com" \
            -e DB_PORT="3306" \
            -e DB_USER="admin" \
            -e DB_PASSWORD="VehicleParts123!" \
            -e DB_NAME="vehicle_parts" \
            -e EMAIL_BACKEND="django.core.mail.backends.console.EmailBackend" \
            -e DEFAULT_FROM_EMAIL="noreply@vehicleparts.com" \
            -e CORS_ALLOWED_ORIGINS="http://localhost:3000,http://127.0.0.1:3000,http://3.107.165.131:8000" \
            vehicle-parts-api
          
          # Wait for container to start
          echo "‚è≥ Waiting for container to start..."
          sleep 15
          
          # Check container status
          echo "üîç Checking container status..."
          docker ps
          
          # Test the API
          echo "üß™ Testing API..."
          curl -s http://localhost:8000/api/v1/auth/health/ || echo "Health check failed"
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê API is available at: http://3.107.165.131:8000"
